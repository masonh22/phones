{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["transportOptions","server","Login","props","render","onSubmit","handleSubmit","type","value","state","onChange","e","handleChange","user","pass","bind","event","text","this","setState","target","preventDefault","submit","React","Component","App","registerer","session","video","login","mediaElement","document","getElementById","remoteStream","MediaStream","sessionDescriptionHandler","peerConnection","getReceivers","forEach","receiver","track","addTrack","srcObject","play","invitation","accept","stateChange","addListener","console","log","SessionState","Initial","Establishing","Established","setupRemoteMedia","Terminating","Terminated","Error","username","userAgentOptions","authorizationPassword","authorizationUsername","delegate","onInvite","onIntive","uri","UserAgent","makeURI","hackWssInTransport","userAgent","Registerer","start","then","register","navigator","mediaDevices","getUserMedia","audio","mediaStream","onloadedmetadata","catch","name","message","body","className","id","muted","autoPlay","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode"],"mappings":"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","file":"static/js/main.43a47e78.chunk.js","sourcesContent":["import './App.css';\nimport React from 'react';\nimport { Registerer, UserAgent, SessionState } from 'sip.js';\n\n\nconst server = 'wss://portal.snapcom.com:9002';\n\nconst transportOptions = {\n  server\n}\n\nclass Login extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      user: '',\n      pass: '',\n    };\n\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n\n  }\n\n  handleChange(event, text) {\n    if (text === 'user') {\n      this.setState({ user: event.target.value });\n    } else {\n      this.setState({ pass: event.target.value });\n    }\n  }\n\n  handleSubmit(event) {\n    event.preventDefault();\n    this.props.submit(this.state.user, this.state.pass);\n  }\n\n  render = () => (\n    <form onSubmit={this.handleSubmit}>\n      <label>\n        Username:\n        <input\n          type=\"text\"\n          value={this.state.value}\n          onChange={(e) => this.handleChange(e, 'user')}\n        />\n      </label>\n      <label>\n        Password:\n        <input\n          type=\"password\"\n          value={this.state.value}\n          onChange={(e) => this.handleChange(e, 'pass')}\n        />\n      </label>\n      <input type=\"submit\" value=\"Submit\" />\n    </form>\n  );\n\n}\n\n\nclass App extends React.Component {\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      user: null,\n      registerer: null,\n      session: null,\n      video: null,\n    };\n\n    this.login = this.login.bind(this);\n  }\n\n  setupRemoteMedia(session) {\n    const mediaElement = document.getElementById('remoteVideo');\n    const remoteStream = new MediaStream();\n    session.sessionDescriptionHandler.peerConnection.getReceivers().forEach((receiver) => {\n      if (receiver.track) {\n        remoteStream.addTrack(receiver.track);\n      }\n    });\n    mediaElement.srcObject = remoteStream;\n    mediaElement.play();\n  }\n\n  onInvite(invitation) {\n    invitation.accept();\n    invitation.stateChange.addListener((state) => {\n      console.log(`Session state changed to ${state}`);\n      switch (state) {\n        case SessionState.Initial:\n          break;\n        case SessionState.Establishing:\n          break;\n        case SessionState.Established:\n          this.setupRemoteMedia(invitation);\n          break;\n        case SessionState.Terminating:\n        // fall through\n        case SessionState.Terminated:\n          //cleanupMedia();\n          break;\n        default:\n          throw new Error(\"Unknown session state.\");\n      }\n    });\n  }\n\n  login(username, pass) {\n    const userAgentOptions = {\n      authorizationPassword: pass,\n      authorizationUsername: username,\n      delegate: {\n        onInvite: this.onIntive,\n      },\n      transportOptions,\n      uri: UserAgent.makeURI('sip:' + username),\n      hackWssInTransport: true,\n    };\n    const userAgent = new UserAgent(userAgentOptions);\n    const registerer = new Registerer(userAgent);\n    userAgent.start().then(() => {\n      registerer.register();\n    });\n    this.setState({ user: userAgent, registerer });\n\n    navigator.mediaDevices.getUserMedia({ audio: true, video: true })\n      .then(mediaStream => {\n        //this.setState({ user: 'a' });\n        var video = document.getElementById('localVideo');\n        video.srcObject = mediaStream;\n        video.onloadedmetadata = () => { video.play(); };\n      })\n      .catch(e => {\n        console.log(e.name + ': ' + e.message);\n      });\n  }\n\n  render() {\n    const body =\n      this.state.user === null ? (<Login submit={this.login} />)\n        : (<div className=\"video\">\n          <video id=\"remoteVideo\"></video>\n          <video\n            id=\"localVideo\"\n            muted=\"muted\"\n            autoPlay={true}\n          ></video>\n        </div>);\n    return (\n      <div className=\"App\">\n        {body}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}